<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux之正则表达式]]></title>
    <url>%2F2019%2F04%2F14%2Flinux%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[语系对正则表达式的影响了解下面几个特殊符号代表的意义 [:alnum:] 代表英文大小写字符以及数字 [:alpha:] 代表英文大小写 [:digit:] 代表数字 [:lower:] 代表英文小写 [:upper:] 代表英文大写 [:punct:] 代表标点符号：”、’、?、!、；、#、$等 正则表达式的练习查找特定字符串 1grep -n &apos;the&apos; test.txt //查找含有the的行，n参数代表显示行号，被查找的字符单引号或者双引号括起来，或者不使用单双引号都可以，如果想要反向选择，加上v参数 利用[]来查找集合字符1234grep -n &apos;t[ab]st&apos; text.txt //查找含有tast，tbst字符的行grep -n &apos;[^g]oo&apos; text.txt //查找含有oo，但是oo前面不为g的行grep -n &apos;[0-9]&apos; text.txt //查找有数字的那一行grep -n &apos;[[:digit:]]&apos; text.txt //效果同上，为了避免语系带来的差异，可以使用特殊符号代替 行首与行尾字符^$12345grep -n &apos;^the&apos; test.txt //以the开头的行grep -n &apos;^[a-z]&apos; test.txt //以小写字母开头行grep -n &apos;^[^A-Za-z]&apos; test.txt //不以字母开头的行，这里就需要注意^号在[]里面和外面的含义grep -n &apos;\.$&apos; test.txt //以.号结尾的行，因为.是特殊字符，所以要用\转义grep -n &apos;^$&apos; test.txt //空行 任意字符与重复字符.* .代表一定有一个任意字符 *代表重复前一个字符，0到无穷多次 12345grep -n &apos;g..d&apos; test.txt //查找含有g??d的行，例如hgood,gngd,hgoodk等grep -n &apos;o*&apos; test.txt //所有行都会打印出来，因为o*代表0个字符或者一个o以上的字符grep -n &apos;g.*g&apos; test.txt //.*代表0个或多个任意字符``` ##### 限定连续字符范围&#123;&#125; grep -n ‘o{2}‘ test.txt //显示含有两个o的行grep -n ‘o{2,5}}’ test.txt //显示含有2到5个o的行12345678#### 通配符 * *代表0到无穷多个字符 * ？代表一定有一个任意字符* [ ]代表一定有一个在括号内的任意字符 * [-]代表在编码顺序内的所有字符* [^]代表反向选择 ls -l ./corn //代表显示当前文件夹下文件名为corn开头的文件ls -l ./??? //代表显示当前文件夹下文件名为3个字符的文件ls -l ./[0-9] //代表显示当前文件夹下文件名含有数字的文件，记得加上两个ls -l ./[^a-z]* //代表显示当前文件夹下文件名不以小写字母开头的文件`注意点通配符一般只用于文件名匹配，它是由shell解析的，比如find，ls，cp，mv等。正则表达式是用来匹配字符串的，针对文件内容的文本过滤工具里，大都用到正则表达式，如vi，grep，awk，sed等。]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5.0系统环境搭建]]></title>
    <url>%2F2019%2F04%2F14%2F5.0%E7%B3%BB%E7%BB%9F%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[sofa配置文件 在服务器的工作目录新建sofa_home文件夹，从其他环境把配置文件复制过来。其中deploy、TempFileData、logs等文件夹的内容不需要，确保存在这层目录就行了 修改global/datasources.xml数据库配置文件 修改app-servel.xml、localhost-env.ini、scheduler.boot文件 was控制台配置 新建服务器 进程定义 - 环境条目 - 新建。名称必须为SOFACONFIG_HOME，值为上一步sofa配置文件的绝对路径 进程定义 - java虚拟机。勾选详细垃圾回收机制，初始堆和最大堆大小都填4096。通用jvm参数输入 1-Dfile.encoding=UTF-8 -Dclient.encoding.override=UTF //平台启动日志出现乱码时可以设置这个 java SDK按照要求选择，本项目组都是选择jdk 1.6 查看端口WC_defaulthost，加入端口自动设置为9084，查看环境 - 虚拟主机 - defaulthost - 主机别名。看列表中有没有对应的端口，如果没有就要新建，否则服务将无法被访问 war包安装 进入企业应用程序界面，点击安装，按照要求选择相应服务器，填写安装地址，填写上下文根 注意，此时启动时后台会报没有fundacc全局数据源的错误，这是因为你没有在datasources.xml配置id为fundacc的数据源，这里公司不建议新增数据源，所以手工把报错的组件的数据源改成acs就行了。]]></content>
      <tags>
        <tag>yss之5.0环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux之数据流重定向]]></title>
    <url>%2F2019%2F04%2F14%2Flinux%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%B5%81%E9%87%8D%E5%AE%9A%E5%90%91%2F</url>
    <content type="text"><![CDATA[数据流重定向 定义：命令执行后，将应该显示在屏幕的数据传到其他地方，例如文件或者打印机 分类标准输出：命令执行后返回的正确信息标准错误输出：命令执行后返回的错误信息 使用1&gt;或者&gt;：以覆盖的形式将正确的数据(标准输出)输出到文件1&gt;&gt;或者&gt;&gt;：以累加的形式将正确的数据(标准输出)输出到文件2&gt;：以覆盖的形式将错误的数据(标准错误输出)输出到文件2&gt;&gt;：以累加的形式将错误的数据(标准错误输出)输出到文件注意：如果输出的目标文件不存在，会自动创建 例一：将包含正确数据和错误数据的显示信息分别输出到不同的文件中答：find /home -name .bashrc &gt; list_right 2&gt;list_error 例二：将包含正确数据和错误数据的显示信息分别输出同一文件中答：find /home -name .bashrc &gt; list 2&gt;&amp;1 或者 find /home -name .bashrc &amp;&gt; list 例三：/dev/null垃圾黑洞用法答：find /home -name .bashrc 2&gt; /dev/null; –把错误信息扔进垃圾黑洞不显示命令执行的判断根据 不考虑命令的相关性的连续命令执行格式：cmd;cmd –前一个命令执行完立刻执行后一个命令 命令间有依耐性的命令执行cmd1 &amp;&amp; cmd2 | cmd1执行完毕且正确执行（$?=0），开始执行cmd2。如果执行错误，不执行cmd2cmd1 || cmd2 | cmd1执行完毕且错误执行（$?=0），开始执行cmd2。如果执行正确，不执行cmd2注意：这种方法能够实现的前提是在linux下，如果一个命令的执行结果为正确，就会返回一个$?=0的值 例一：不管/tmp/abc是否存在，都要创建/tmp/abc/text文件答：ls /tmp/abc || mkdir /tmp/abc &amp;&amp; touch /tmp/abc/text分两种情况讨论：一：/tmp/abc存在，这样的话”ls /tmp/abc”就会正常执行，返回$?=0,由于后面跟的是||，所以不会执行后面的命令“mkdir /tmp/abc”，命令会接着往后执行，碰到&amp;&amp;命令，正常执行“touch /tmp/abc/text ”二：tmp/abc不存在，不讨论]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F04%2F14%2Flinux%E4%B9%8B%E7%94%9F%E6%88%90Javacore%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[title: linux之生成Javacore文件 tags: [Linux]12ps -ef | grep serverName（服务名） kill -3 服务pid 现在Javacore文件就生成了，目录是/proc/51356(pid)/cwd]]></content>
  </entry>
  <entry>
    <title><![CDATA[linux之管道命令]]></title>
    <url>%2F2019%2F04%2F14%2Flinux%E4%B9%8B%E7%AE%A1%E9%81%93%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[注意点1：管道命令只会处理标准输出（stdout），忽略标准错误（stderr） 注意点2：管道命令必须能够接受前一个命令的数据作为标准输入继续处理（像grep等命令）。选取命令cut -d 后面接分割字符，与-f一起使用 -f 根据-d的分割字符将信息分段，-f后面接的数字代表取出第几段 -c 以字符的单位取出固定字符区间 例一：取出path路径的第三和第五个路径 1echo &#123;path&#125; | cut -d &apos;:&apos; -f 3,5 例二：将export输出的信息，取的第十二个字符之后的所有字符 1export | cut -c 12- //(如果是取第十二个字符之前，就是“-11”，如果是去区间，就是“10-20”) grep -c 计算查找到字符的次数 -i 忽略大小写 -n 输出行号 -v 反向选择，输出没有‘查找字符’的那一行 例一：last输出信息，只要有root就取出，并且只取出第一栏 1last | grep &apos;root&apos; | cut -d &apos; &apos; -f 1 排序命令sort -f 忽略大小写差异 -b 忽略最前面空格字符部分 -r 反向排序 -u 相同数据，仅显示一行 -t 分隔符号，默认是用[tab]键进行分隔 -k 以哪个区间进行排序 例一：对系统的所有账号进行排序 1cat /etc/passwd | sort uniq例一：last登录信息，获得每个账号的登录总次数 1last | cut -d &apos; &apos; -f 1 | sort | uniq -c //注意要加sort wc -l 仅列出行 -w 仅列出字 -m 多少字符 双向重定向tee(同时将数据流分送到屏幕和文件) -a 以累加的形式，将数据加到文件 1last | tee last.list | cut -d &apos; &apos; 划分命令split -b 后面接划分文件的大小，比如说b、k、m等 -l 以行数进行划分 例一：把/etc/services分成20k大小的文件 1split -b 20k /etc/services //生成servicesaa、servicesab、servicesac...]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux之SHELL中的exit 0 和 exit 1的区别]]></title>
    <url>%2F2019%2F04%2F14%2Flinux%E4%B9%8BSHELL%E4%B8%AD%E7%9A%84exit%200%20%E5%92%8C%20exit%201%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[当你 exit 0 的时候,在调用环境 echo $? 就返回0，也就是说调用环境就认为你的这个程序执行正确 当你 exit 1 的时候,一般是出错定义这个1，也可以是其他数字，很多系统程序这个错误编号是有约定的含义的。 但不为0就表示程序运行出错。调用环境就可以根据这个返回值判断你这个程序运行是否ok。 例：如果你用 脚本 a 调用 脚本b ，要在a中判断b是否正常返回，就是根据 exit 0 or 1 来识别。执行完b后， 判断 $? 就是返回值]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大海呀]]></title>
    <url>%2F2019%2F04%2F14%2F%E6%83%A0%E5%B7%9E%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库空间查看和连接数查看]]></title>
    <url>%2F2019%2F04%2F14%2Foracle%E4%B9%8B%E6%9F%A5%E8%AF%A2%E8%A1%A8%E7%A9%BA%E5%A4%A7%E5%B0%8F%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%95%B0%2F</url>
    <content type="text"><![CDATA[- 查询表空间的大小和占用率123456789101112131415161718SELECT UPPER(F.TABLESPACE_NAME) &quot;表空间名&quot;, D.TOT_GROOTTE_MB &quot;表空间大小(M)&quot;, D.TOT_GROOTTE_MB - F.TOTAL_BYTES &quot;已使用空间(M)&quot;, TO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100, 2), &apos;990.99&apos;) &quot;使用比&quot;, F.TOTAL_BYTES &quot;空闲空间(M)&quot;, F.MAX_BYTES &quot;最大块(M)&quot; FROM (SELECT TABLESPACE_NAME, ROUND(SUM(BYTES) / (1024 * 1024),2) TOTAL_BYTES, ROUND(MAX(BYTES) / (1024 * 1024),2) MAX_BYTES FROM SYS.DBA_FREE_SPACE GROUP BY TABLESPACE_NAME) F, (SELECT DD.TABLESPACE_NAME, ROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB FROM SYS.DBA_DATA_FILES DD GROUP BY DD.TABLESPACE_NAME) D WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME ORDER BY 4 DESC - 查看最大连接数12345 SQL&gt; select count(*) from v$session #当前的连接数SQL&gt; Select count(*) from v$session where status=&apos;ACTIVE&apos; #并发连接数SQL&gt; select value from v$parameter where name = &apos;processes&apos; --数据库允许的最大连接数SQL&gt; show parameter processes #最大连接 SQL&gt; select username,count(username) from v$session where username is not null group by username; #查看不同用户的连接数 - 修改最大连接数1alter system set processes = 2000 scope = spfile; - 重启数据库12shutdown immediate;startup; - 监听操作监听查看:lsnrctl status 启动监听:lsnrctl start 停止监听:lsnrctl stop]]></content>
      <tags>
        <tag>Oracle数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库空间查看和连接数查看]]></title>
    <url>%2F2019%2F04%2F14%2FOracle%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E6%9F%A5%E7%9C%8B%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%9F%A5%E7%9C%8B%2F</url>
    <content type="text"><![CDATA[- 查询表空间的大小和占用率123456789101112131415161718SELECT UPPER(F.TABLESPACE_NAME) &quot;表空间名&quot;, D.TOT_GROOTTE_MB &quot;表空间大小(M)&quot;, D.TOT_GROOTTE_MB - F.TOTAL_BYTES &quot;已使用空间(M)&quot;, TO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100, 2), &apos;990.99&apos;) &quot;使用比&quot;, F.TOTAL_BYTES &quot;空闲空间(M)&quot;, F.MAX_BYTES &quot;最大块(M)&quot; FROM (SELECT TABLESPACE_NAME, ROUND(SUM(BYTES) / (1024 * 1024),2) TOTAL_BYTES, ROUND(MAX(BYTES) / (1024 * 1024),2) MAX_BYTES FROM SYS.DBA_FREE_SPACE GROUP BY TABLESPACE_NAME) F, (SELECT DD.TABLESPACE_NAME, ROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB FROM SYS.DBA_DATA_FILES DD GROUP BY DD.TABLESPACE_NAME) D WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME ORDER BY 4 DESC - 查看最大连接数12345 SQL&gt; select count(*) from v$session #当前的连接数SQL&gt; Select count(*) from v$session where status=&apos;ACTIVE&apos; #并发连接数SQL&gt; select value from v$parameter where name = &apos;processes&apos; --数据库允许的最大连接数SQL&gt; show parameter processes #最大连接 SQL&gt; select username,count(username) from v$session where username is not null group by username; #查看不同用户的连接数 - 修改最大连接数1alter system set processes = 2000 scope = spfile; - 重启数据库12shutdown immediate;startup; - 监听操作监听查看:lsnrctl status 启动监听:lsnrctl start 停止监听:lsnrctl stop]]></content>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle操作之数据泵操作]]></title>
    <url>%2F2019%2F04%2F14%2Foracle%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%B3%B5%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[创建目录：确保此目录已经授权给用户了1create directory dump_dir as &apos;/home/oracle/backup&apos; 创建临时表空间123create temporary tablespace bx_temp tempfile &apos;\home\oracle\bx_temp.dbf&apos; size 50m autoextend on next 50m maxsize 2048m extent management local 如果导入时发现临时文件空间不足： 12alter tablespace bx_temp add tempfile &apos;\home\oracle\bx_temp1.dbf&apos; size 100M autoextend on next 20M maxsize 1024M 创建表空间1234create tablespace bx logging datafile &apos;\home\oracle\bx.dbf&apos; size 50m autoextend on next 50m maxsize 2048m extent management local 创建用户123create user bxUser identified by bxPassword default tablespace bx temporary tablespace bx_tempdrop user userName cascade --删除用户 授权1grant create session,connect,resource,select any table to bxUser 收回权限：revoke dba from bxUser2.授予用户操作directory的权限grant read,write on directory DUMP_DIR to bxUser删除表空间 1drop tablespace 名字 including contents and datafiles 数据泵导入12impdp 用户名/密码 directory=dump_dir dumpfile=abc.dmp REMAP_SCHEMA=原用户名:现用户名 REMAP_TABLESPACE=原表空间名:现表空间名 full=y logfile=abc.log 注意点一：用impdp 导入，检查 table_statistics 时等待了N长时间解决办法：EXCLUDE=TABLE_STATISTICS 选项将 table_statistics 对象过滤 注意点二：ORA-14460: only one COMPRESS or NOCOMPRESS clause may be specified解决办法：导入命令加入 transform=segment_attributes:n 注意点三：待补充 数据泵导出1expdp 用户名/密码@ip/orcl directory=dump_dir dumpfile=abc.dmp logfile=abc.log 压缩参数 ALL ：对导出的元数据和表数据都进行压缩，得到的导出文件是最小的，耗时也是最长的。 DATA_ONLY ：仅对表数据进行压缩，对于大数据量的导出效果明显，会比METADATA_ONLY方式得到更小的压缩文件。 METADATA_ONLY ：仅对元数据进行压缩，而不会对表数据进行压缩，这种压缩执行后效果一般不是很明显，不过速度比较快。 NONE ：不进行任何的压缩，导出后的文件也是最大的。 DEFAULT ：默认方式，即不指定COMPRESSION参数，会采用默认的压缩方式METADATA_ONLY。 ++例：expdp hcxiang/willnice directory=HCXBAK dumpfile=bt02_all.dump tables=BT02 compression=all++ 知识点：元数据（metadata）最常见的定义为“有关数据的结构数据”，或者再简单一点就是“关于数据的信息”在关系型数据库管理系统中，元数据描述了数据的结构和意义。 比如在管理、维护或者是开发数据库应用程序的时候，我们经常要获取一些涉及到数据库架构的信息： 1)、某个数据库中的表和视图的个数以及名称； 2)、某个表或者视图中列的个数以及每一列的名称、数据类型、长度、精度、描述等； 3)、表上定义的约束； 4)、表上定义的索引以及主键/外键信息。 常用sql查看用户拥有的角色：select from user_role_privs查看用户所有的权限：select from session_privs查询所有表空间：select from dba_tablespaces查询用户属于哪一个表空间，在system用户下查找：select default_tablespace from dba_users where username=’用户名（必须大写）’查询所有目录，在拥有DBA权限的用户下查：select from dba_directories]]></content>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oracle之误删除数据的恢复方法]]></title>
    <url>%2F2019%2F04%2F14%2Foracle%E4%B9%8B%E8%AF%AF%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E7%9A%84%E6%81%A2%E5%A4%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[delete误删除的解决方法原理：利用oracle提供的闪回方法，如果在删除数据后还没做大量的操作（只要保证被删除数据的块没被覆写），就可以利用闪回方式直接找回删除的数据 确定删除数据的时间（在删除数据之前的时间就行，不过最好是删除数据的时间点） 用以下语句找出删除的数据：select * from 表名 as of timestamp to_timestamp(‘删除时间点’,’yyyy-mm-dd hh24:mi:ss’) 把删除的数据重新插入原表： insert into 表名 (select * from 表名 as of timestamp to_timestamp(‘删除时间点’,’yyyy-mm-dd hh24:mi:ss’));注意要保证主键不重复 如果表结构没有发生改变，还可以直接使用闪回整个表的方式来恢复数据。 alter table 表名 enable row movement –开启行移动功能 flashback table 表名 to timestamp to_timestamp(删除时间点’,’yyyy-mm-dd hh24:mi:ss’) –恢复表数据 alter table 表名 disable row movement –关闭行移动功能 ( 千万别忘记 ) 注意：表闪回要求用户必须要有flash any table权限 drop误删除的解决方法原理：由于oracle在删除表时，没有直接清空表所占的块,oracle把这些已删除的表的信息放到了一个虚拟容器“回收站”中，而只是对该表的数据块做了可以被覆写的标志，所以在块未被重新使用前还可以恢复。 查询这个“回收站”或者查询user_table视图来查找已被删除的表: 12select table_name,dropped from user_tablesselect object_name,original_name,type,droptime from user_recyclebin 注意： 在以上信息中，表名都是被重命名过的，字段table_name或者object_name就是删除后在回收站中的存放表名 如果还能记住表名，则可以用下面语句直接恢复： 1flashback table 原表名 to before drop 如果记不住了，也可以直接使用回收站的表名进行恢复，然后再重命名，参照以下语句： 1flashback table &quot;回收站中的表名(如：Bin$DSbdfd4rdfdfdfegdfsf==$0)&quot; to before drop rename to 新表名 oracle的闪回功能除了以上基本功能外，还可以闪回整个数据库：使用数据库闪回功能，可以使数据库回到过去某一状态, 语法如下： 123SQL&gt;alter database flashback onSQL&gt;flashback database to scn SCNNO;SQL&gt;flashback database to timestamp to_timestamp(&apos;2007-2-12 12:00:00&apos;,&apos;yyyy-mm-dd hh24:mi:ss&apos;); 总结oracle提供以上机制保证了安全操作，但同时也代来了另外一个问题，就是空间占用，由于以上机制的运行，使用drop一个表或者delete数据后，空间不会自动回收，对于一些确定不使用的表，删除时要同时回收空间，可以有以下2种方式： 采用truncate方式进行截断。（但不能进行数据回恢复了） 在drop时加上purge选项：drop table 表名 purge也可以通过删除recyclebin区域来永久性删除表 ,原始删除表drop table emp cascade constraintspurge table emp; 删除当前用户的回收站:purge recyclebin; 删除全体用户在回收站的数据:purge dba_recyclebin]]></content>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github和hexo搭建个人免费博客]]></title>
    <url>%2F2019%2F03%2F25%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[安装node作用是生成静态页面（github上存的都是静态页面）123curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - // 如果想用6.x版本sudo apt-get install -y nodejs 安装git作用是把本地的hexo内容提交到github上1apt install git 注册github账号作用是用来做远程仓库，由于github公司的服务器是一直运行的，所以你放在上面的页面也可以一直被访问配置SSH Keys设置用户12git config --global user.name &quot;your name&quot;git config --globa user.email &quot;your email.com&quot; 生成ssh key1ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; //your_email@example.com 替换为你的邮箱 当你看到 Enter a file in which to save the key 的提示后，按Enter键.意思就是使用默认路径，看到 type a secure passphrase的提示后，输入你的密码。至此ssh key 就生成了。接下来就是将 ssh key 的公钥 添加到github。找到刚才我们刚才路径下的 .ssh文件，Ctrl+h显示隐藏文件，打开ssh.pub文件，将其中的内容全部复制，在github上新建ssh，把刚刚复制的内容粘贴到输入框即可 安装hexo：作用是一个博客框架，支持markdown语法1npm install -g hexo-cli 安装完成之后还要执行下列命令，进行框架的初始化hexo init 初始化工作空间，例如： hexo init myblog/ 意思就是在home目录下新建了myblog工作空间12cd myblognpm install 至此hexo已经安装完毕了，启动服务hexo server。默认的端口号是4000，你就可以通过http://localhost:4000/ 访问了，如果4000端口被占用，可以使用 hexo server -p 5000命令，换成5000端口启动服务 github与本地hexo建立连接新建仓库注意：建立仓库时注意仓库名的格式必须为【你的github名称.github.io】修改站点（站点就是上一步的工作空间）配置文件_config.yml的部署信息12345deploy: type: git repo: git@github.com:YiShanQingF/YiShanQingF.github.io.git branch: master message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH:mm:ss&quot;)&#125;&#125;&apos; 建议复制修改，因为空格符号什么的很容易敲错执行下面命令1234npm install hexo-deployer-git –savehexo clean //清楚缓存，我的理解就是删除工作空间下的public文件夹，而public文件夹下面存放的就是生成的静态界面hexo generate //把你的文章变成静态界面，所以如果你写了一篇新文章，或者修改了主题，你就必须执行这一步才能看到效果hexo deploy //把本地的静态文件同步到github 现在你就可以通过输入http://你的仓库名。例如我的就是：http://breakpointworld.github.io 绑定域名在hexo的工作空间下的source目录下新建一个CNAME的文件，里面写上购买的域名修改域名解析如下：记录类型为CNAME，主机记录为@，解析线路：默认，记录值：breakpointworld.github.io大功告成！！！ 注意点一：如果你想github pages发布在一级目录，那么你的仓库名必须跟你的github名称一致，否则你的github pages会自动发布在二级目录。如下图所示： ps：最后附上我参考的两个链接，里面介绍的很详细：Ubuntu平台下通过Hexo在Github上搭建博客教程Ubuntu下与github建立ssh连接]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对着珠江喝酒打屁]]></title>
    <url>%2F2019%2F03%2F25%2F%E4%B8%8E%E5%AE%A4%E5%8F%8B%E6%B8%B8%E5%B9%BF%E5%B7%9E%2F</url>
    <content type="text"><![CDATA[]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
