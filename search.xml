<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[github和hexo搭建个人免费博客]]></title>
    <url>%2F2019%2F03%2F25%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[安装node作用是生成静态页面（github上存的都是静态页面）123curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash - // 如果想用6.x版本sudo apt-get install -y nodejs 安装git作用是把本地的hexo内容提交到github上123456789 apt install git``` &lt;!--more--&gt; #### 注册github账号 作用是用来做远程仓库，由于github公司的服务器是一直运行的，所以你放在上面的页面也可以一直被访问 配置SSH Keys 设置用户 git config --global user.name &quot;your name&quot; git config --globa user.email &quot;your email.com&quot; 1#### 生成ssh key ssh-keygen -t rsa -b 4096 -C “your_email@example.com“ //your_email@example.com 替换为你的邮箱12当你看到 Enter a file in which to save the key 的提示后，按Enter键.意思就是使用默认路径，看到 type a secure passphrase的提示后，输入你的密码。至此ssh key 就生成了。接下来就是将 ssh key 的公钥 添加到github。找到刚才我们刚才路径下的 .ssh文件，Ctrl+h显示隐藏文件，打开ssh.pub文件，将其中的内容全部复制，在github上新建ssh，把刚刚复制的内容粘贴到输入框即可#### 安装hexo：作用是一个博客框架，支持markdown语法 npm install -g hexo-cli 12安装完成之后还要执行下列命令，进行框架的初始化 hexo init 初始化工作空间，例如： hexo init myblog/ 意思就是在home目录下新建了myblog工作空间 cd myblognpm install12345至此hexo已经安装完毕了，启动服务hexo server。默认的端口号是4000，你就可以通过http://localhost:4000/ 访问了，如果4000端口被占用，可以使用 hexo server -p 5000命令，换成5000端口启动服务#### github与本地hexo建立连接新建仓库注意：**建立仓库时注意仓库名的格式必须为【你的github名称.github.io】** 修改站点（站点就是上一步的工作空间）配置文件_config.yml的部署信息 deploy: type: git repo: git@github.com:YiShanQingF/YiShanQingF.github.io.git branch: master message: &apos;站点更新:{{now("YYYY-MM-DD HH:mm:ss")}}&apos; 12**建议复制修改，因为空格符号什么的很容易敲错**执行下面命令 npm install hexo-deployer-git –savehexo clean //清楚缓存，我的理解就是删除工作空间下的public文件夹，而public文件夹下面存放的就是生成的静态界面hexo generate //把你的文章变成静态界面，所以如果你写了一篇新文章，或者修改了主题，你就必须执行这一步才能看到效果hexo deploy //把本地的静态文件同步到github`现在你就可以通过输入http://你的仓库名。例如我的就是：http://breakpointworld.github.io 绑定域名在hexo的工作空间下的source目录下新建一个CNAME的文件，里面写上购买的域名修改域名解析如下：记录类型为CNAME，主机记录为@，解析线路：默认，记录值：breakpointworld.github.io大功告成！！！ 注意点一：如果你想github pages发布在一级目录，那么你的仓库名必须跟你的github名称一致，否则你的github pages会自动发布在二级目录。如下图所示： ps：最后附上我参考的两个链接，里面介绍的很详细：Ubuntu平台下通过Hexo在Github上搭建博客教程Ubuntu下与github建立ssh连接]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F03%2F25%2F%E4%B8%8E%E5%AE%A4%E5%8F%8B%E6%B8%B8%E5%B9%BF%E5%B7%9E%2F</url>
    <content type="text"><![CDATA[title: 对着珠江喝酒打屁tags: 生活]]></content>
  </entry>
  <entry>
    <title><![CDATA[oracle操作之数据泵操作]]></title>
    <url>%2F2019%2F03%2F25%2F%E6%95%B0%E6%8D%AE%E6%B3%B5%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[创建目录：确保此目录已经授权给用户了 1create directory dump_dir as &apos;/home/oracle/backup&apos; 创建临时表空间 123create temporary tablespace bx_temp tempfile &apos;\home\oracle\bx_temp.dbf&apos; size 50m autoextend on next 50m maxsize 2048m extent management local 如果导入时发现临时文件空间不足： 12alter tablespace bx_temp add tempfile &apos;\home\oracle\bx_temp1.dbf&apos; size 100M autoextend on next 20M maxsize 1024M 创建表空间 123456789create tablespace bx logging datafile &apos;\home\oracle\bx.dbf&apos; size 50m autoextend on next 50m maxsize 2048m extent management local``` &lt;!--more--&gt;- 创建用户 create user bxUser identified by bxPassword default tablespace bx temporary tablespace bx_temp drop user userName cascade –删除用户12- 授权 grant create session,connect,resource,select any table to bxUser123456- 1. 收回权限： revoke dba from bxUser 2.授予用户操作directory的权限 grant read,write on directory DUMP_DIR to bxUser- 删除表空间 drop tablespace 名字 including contents and datafiles12- 数据泵导入 impdp 用户名/密码 directory=dump_dir dumpfile=abc.dmp REMAP_SCHEMA=原用户名:现用户名REMAP_TABLESPACE=原表空间名:现表空间名 full=y logfile=abc.log12345678注意点一：用impdp 导入，检查 table_statistics 时等待了N长时间 解决办法：EXCLUDE=TABLE_STATISTICS 选项将 table_statistics 对象过滤 注意点二：ORA-14460: only one COMPRESS or NOCOMPRESS clause may be specified 解决办法：导入命令加入 transform=segment_attributes:n 注意点三：待补充- 数据泵导出 expdp 用户名/密码@ip/orcl directory=dump_dir dumpfile=abc.dmp logfile=abc.log` 常用sql查看用户拥有的角色：select from user_role_privs查看用户所有的权限：select from session_privs查询所有表空间：select from dba_tablespaces查询用户属于哪一个表空间，在system用户下查找：select default_tablespace from dba_users where username=’用户名（必须大写）’查询所有目录，在拥有DBA权限的用户下查：select from dba_directories]]></content>
      <tags>
        <tag>Oracle数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库空间查看和连接数查看]]></title>
    <url>%2F2019%2F03%2F24%2F%E6%9F%A5%E8%AF%A2%E8%A1%A8%E7%A9%BA%E5%A4%A7%E5%B0%8F%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%95%B0%2F</url>
    <content type="text"><![CDATA[- 查询表空间的大小和占用率123456789101112131415161718SELECT UPPER(F.TABLESPACE_NAME) &quot;表空间名&quot;, D.TOT_GROOTTE_MB &quot;表空间大小(M)&quot;, D.TOT_GROOTTE_MB - F.TOTAL_BYTES &quot;已使用空间(M)&quot;, TO_CHAR(ROUND((D.TOT_GROOTTE_MB - F.TOTAL_BYTES) / D.TOT_GROOTTE_MB * 100, 2), &apos;990.99&apos;) &quot;使用比&quot;, F.TOTAL_BYTES &quot;空闲空间(M)&quot;, F.MAX_BYTES &quot;最大块(M)&quot; FROM (SELECT TABLESPACE_NAME, ROUND(SUM(BYTES) / (1024 * 1024),2) TOTAL_BYTES, ROUND(MAX(BYTES) / (1024 * 1024),2) MAX_BYTES FROM SYS.DBA_FREE_SPACE GROUP BY TABLESPACE_NAME) F, (SELECT DD.TABLESPACE_NAME, ROUND(SUM(DD.BYTES) / (1024 * 1024), 2) TOT_GROOTTE_MB FROM SYS.DBA_DATA_FILES DD GROUP BY DD.TABLESPACE_NAME) D WHERE D.TABLESPACE_NAME = F.TABLESPACE_NAME ORDER BY 4 DESC - 查看最大连接数12345 SQL&gt; select count(*) from v$session #当前的连接数SQL&gt; Select count(*) from v$session where status=&apos;ACTIVE&apos; #并发连接数SQL&gt; select value from v$parameter where name = &apos;processes&apos; --数据库允许的最大连接数SQL&gt; show parameter processes #最大连接 SQL&gt; select username,count(username) from v$session where username is not null group by username; #查看不同用户的连接数 - 修改最大连接数1alter system set processes = 2000 scope = spfile; - 重启数据库12shutdown immediate;startup; - 监听操作监听查看:lsnrctl status 启动监听:lsnrctl start 停止监听:lsnrctl stop]]></content>
      <tags>
        <tag>Oracle数据库</tag>
      </tags>
  </entry>
</search>
